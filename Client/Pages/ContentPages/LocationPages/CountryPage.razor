@implements IDisposable

@if (allState.ShowCountry)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">@Title Country</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddCountry">
                            <i class="bi bi-plus-circle-dotted"></i> Add Country
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px;overflow-x:hidden;overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Countries)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Countryes added yet</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}


<CountryDialog @ref="countryDialog"
               HandleSaveOperationEvent="HandleSaveOperationEvent"
               Country="Country" />


@code {

    public string Title { get; set; } = "Add";
    CountryDialog? countryDialog;
    Country Country = new();
    public List<Country> Countries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    void AddCountry()
    {
        countryDialog?.ChangeTitle("Add");
        Country = new();
        countryDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Country country)
    {
        bool successCheck = false;
        if (Country.Id > 0)
        {
            var result = await countryService
                .Update(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await countryService
                .Insert(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Country = new();
            await GetCountries();
            countryDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(Country ctr)
    {
        Country = new Country
        {
            Id = ctr.Id,
            Name = ctr.Name
        };
        countryDialog?.ChangeTitle("Update");
        countryDialog?.OpenDialog();
    }

    private async Task DeleteClicked(Country ctr)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {ctr.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await countryService.DeleteById(ctr.Id, Constants.CountryBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetCountries();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}


<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>