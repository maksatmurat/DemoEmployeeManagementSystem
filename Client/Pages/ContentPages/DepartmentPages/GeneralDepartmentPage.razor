@implements IDisposable

@if (allState.ShowGeneralDepartment)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">General Department</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Add Department
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px;overflow-x:hidden;overflow-y:scroll">

                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (GeneralDepartments is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in GeneralDepartments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Department added yet</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

<GeneralDepartmentDialog @ref="generalDepartmentDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         GeneralDepartment="GeneralDepartment" />



@code {

    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment GeneralDepartment = new();
    public string Title { get; set; } = "Add";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        //allState.Click("GeneralDepartment");
        await GetGeneralDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constans.GeneralDepartmentBaseUrl);
    }

    void OpenDialog()
    {
        generalDepartmentDialog?.OpenDialog();
    }


    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if (generalDepartment.Id > 0)
        {
            var result = await generalDepartmentService
            .Update(generalDepartment, Constans.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await generalDepartmentService
            .Insert(generalDepartment, Constans.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartments();
            generalDepartmentDialog?.ChangeTitle("Add");
        }
    }


    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        GeneralDepartment = dep;
        OpenDialog();
    }

    private async Task DeleteClicked(GeneralDepartment dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await generalDepartmentService.DeleteById(dep.Id, Constans.GeneralDepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetGeneralDepartments();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    #region sonra sil

    @*<GeneralDepartmentDialog @ref="generalDepartmentDialog"
                                 GeneralDepartment="GeneralDepartment"
                                 HandleSaveOperationEvent="HandleSaveOperationEvent" />

        <button class="btn btn-success" @onclick="CreateNewDepartment">Yeni Department Ekle</button>

        <table class="table">
            @foreach (var dept in GeneralDepartmentList)
            {
                <tr>
                    <td>@dept.Name</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditDepartment(dept)">Güncelle</button>
                    </td>
                </tr>
            }
        </table>

        @code {
            private List<GeneralDepartment> GeneralDepartmentList = new();
            private GeneralDepartment GeneralDepartment = new(); // Bu parametre dialog'a gönderiliyor
            private GeneralDepartmentDialog? generalDepartmentDialog;

            private async Task HandleSaveOperationEvent(GeneralDepartment department)
            {
                bool successCheck = false;

                if (department.Id > 0)
                {
                    var result = await generalDepartmentService.Update(department, Constans.GeneralDepartmentBaseUrl);
                    successCheck = await DisplayMessage(result.Flag, result.Message);
                }
                else
                {
                    var response = await generalDepartmentService.Insert(department, Constans.GeneralDepartmentBaseUrl);
                    successCheck = await DisplayMessage(response.Flag, response.Message);
                }

                if (successCheck)
                {
                    GeneralDepartment = new(); // Form temizlensin
                    await GetGeneralDepartments();
                    generalDepartmentDialog?.ChangeTitle("Add");
                }
            }

            private async Task GetGeneralDepartments()
            {
                GeneralDepartmentList = await generalDepartmentService.GetAll(Constans.GeneralDepartmentBaseUrl);
            }

            private void CreateNewDepartment()
            {
                GeneralDepartment = new(); // <-- ÖNEMLİ: Sıfır nesne
                generalDepartmentDialog?.ChangeTitle("Add");
                generalDepartmentDialog?.OpenDialog();
            }

            private void EditDepartment(GeneralDepartment dept)
            {
                GeneralDepartment = new GeneralDepartment
                {
                    Id = dept.Id,
                    Name = dept.Name
                };

                generalDepartmentDialog?.ChangeTitle("Edit");
                generalDepartmentDialog?.OpenDialog();
            }

            protected override async Task OnInitializedAsync()
            {
                await GetGeneralDepartments();
            }

            private async Task<bool> DisplayMessage(bool flag, string message)
            {
                if (flag)
                {
                    await dialogService.AlertAsync(message, "Success Operation");
                    return true;
                }
                else
                {
                    await dialogService.AlertAsync(message, "Alert!");
                    return false;
                }
            }
        }*@


    #endregion

}
