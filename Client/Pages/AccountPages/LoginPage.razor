@page "/identity/account/login"
@layout AuthenticationLayout
@inject Syncfusion.Blazor.Popups.SfDialogService DialogService

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="row w-100">
        <div class="col-lg-3"></div>
        <div class="col-lg-6">
            <EditForm Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="card " style="opacity: 0.8; border-radius: 10px; color: white; font-family: bold; background-color: color-mix(in srgb, var(--bg-color) 80%, #b9a6b9 20%); ">
                    <div class="card-header text-center fs-5 mb-2 " style="color:var(--text-color)">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4  d-flex justify-content-center">
                                <img style="border-radius:20px;" src="/images/images.png" height="50" width="50" />
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                        <i class="bi bi-person-circle me-2"></i> Lütfen Giriş Yapın
                    </div>
                    <div class="card-body ">
                        <div class="form-group mb-3">
                            <label for="email" class="form-label">E-posta</label>
                            <InputText @bind-Value="User.Email" id="email" class="form-control" placeholder="mail@ornek.com" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Şifre</label>
                            <InputText @bind-Value="User.Password" id="password" type="password" class="form-control" placeholder="••••••••" />
                        </div>

                      
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <div class="col-lg-8 col-md-8 col-sm-12">
                                <span class="text-center" style="color:var(--text-color)">
                                    Don`t have account?
                                    <a href="identity/account/register" class="btn-link">Sign Up</a>
                                    @*<br />Go Home Page <a href="/" class="btn-link" style="color:var(--text-color)">Home</a>*@
                                </span>
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-12">
                                <div class="d-grid form-group mt-1">
                                    @if (ShowLoadingButton)
                                    {
                                        <Client.Pages.OtherPages.ButtonLoadingSpinner />
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-outline-primary float-end">
                                            <i class="bi bi-box-arrow-in-right me-2"></i> Giriş Yap
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <ValidationSummary />
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-3"></div>

    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;

    Login User = new();
    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);

        }
        else  
        {
            await DisplayDialog(result.Message, "Alert");
        }

        ShowLoadingButton = false;

    }
    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }
}
